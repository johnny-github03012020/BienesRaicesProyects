{"ast":null,"code":"/**\r\n * Utility for handling authentication redirects\r\n */\n\n// Store the current path for after login\nexport const storeRedirectPath = path => {\n  try {\n    console.log('Storing redirect path:', path);\n    localStorage.setItem('authRedirectPath', path);\n    return true;\n  } catch (error) {\n    console.error('Error storing redirect path:', error);\n    return false;\n  }\n};\n\n// Get the stored redirect path\nexport const getRedirectPath = () => {\n  try {\n    const path = localStorage.getItem('authRedirectPath');\n    console.log('Retrieved redirect path:', path);\n    return path;\n  } catch (error) {\n    console.error('Error getting redirect path:', error);\n    return null;\n  }\n};\n\n// Clear the stored redirect path\nexport const clearRedirectPath = () => {\n  try {\n    localStorage.removeItem('authRedirectPath');\n    return true;\n  } catch (error) {\n    console.error('Error clearing redirect path:', error);\n    return false;\n  }\n};\n\n// Handle the redirect to login\nexport const redirectToLogin = () => {\n  // Force a complete page reload to the login page\n  window.location.replace('/login');\n};","map":{"version":3,"names":["storeRedirectPath","path","console","log","localStorage","setItem","error","getRedirectPath","getItem","clearRedirectPath","removeItem","redirectToLogin","window","location","replace"],"sources":["C:/Proyectos/BienesRaicesProyects/src/utils/authRedirect.js"],"sourcesContent":["/**\r\n * Utility for handling authentication redirects\r\n */\r\n\r\n// Store the current path for after login\r\nexport const storeRedirectPath = (path) => {\r\n  try {\r\n    console.log('Storing redirect path:', path);\r\n    localStorage.setItem('authRedirectPath', path);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error storing redirect path:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get the stored redirect path\r\nexport const getRedirectPath = () => {\r\n  try {\r\n    const path = localStorage.getItem('authRedirectPath');\r\n    console.log('Retrieved redirect path:', path);\r\n    return path;\r\n  } catch (error) {\r\n    console.error('Error getting redirect path:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Clear the stored redirect path\r\nexport const clearRedirectPath = () => {\r\n  try {\r\n    localStorage.removeItem('authRedirectPath');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing redirect path:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Handle the redirect to login\r\nexport const redirectToLogin = () => {\r\n  // Force a complete page reload to the login page\r\n  window.location.replace('/login');\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,iBAAiB,GAAIC,IAAI,IAAK;EACzC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,IAAI,CAAC;IAC3CG,YAAY,CAACC,OAAO,CAAC,kBAAkB,EAAEJ,IAAI,CAAC;IAC9C,OAAO,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAI;IACF,MAAMN,IAAI,GAAGG,YAAY,CAACI,OAAO,CAAC,kBAAkB,CAAC;IACrDN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,IAAI,CAAC;IAC7C,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;EACrC,IAAI;IACFL,YAAY,CAACM,UAAU,CAAC,kBAAkB,CAAC;IAC3C,OAAO,IAAI;EACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAGA,CAAA,KAAM;EACnC;EACAC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC,QAAQ,CAAC;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}