{"ast":null,"code":"import axios from 'axios';\n\n// Simplificamos usando una sola URL base\nconst BASE_URL = 'http://localhost:8000/';\n// eslint-disable-next-line no-unused-vars\nconst API_URL = `${BASE_URL}api/`;\n\n// Configuración básica de axios\naxios.defaults.withCredentials = false; // Cambiamos a false para evitar problemas de CORS\n\n// Exportamos esta función para que pueda ser importada directamente\n// Modificamos la función isAdminUser para que sea asíncrona\nexport const isAdminUser = async () => {\n  // Simplemente devolvemos el valor almacenado en localStorage\n  return localStorage.getItem('isAdminUser') === 'true';\n};\nconst authService = {\n  // Verificar si el usuario está autenticado\n  isAuthenticated: () => {\n    return !!localStorage.getItem('authToken');\n  },\n  // Cerrar sesión\n  logout: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('isAdminUser');\n    localStorage.removeItem('userData');\n  },\n  // Login function - simplificada\n  // En la función login, modificar la parte de la respuesta simulada:\n  login: async credentials => {\n    try {\n      console.log('Intentando iniciar sesión con:', credentials);\n\n      // Implementación temporal: simular inicio de sesión exitoso\n      // Solo permitir acceso de administrador a usuarios específicos\n      const isAdmin = credentials.username === 'admin' || credentials.username === 'superadmin';\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          id: 1,\n          username: credentials.username,\n          email: `${credentials.username}@example.com`,\n          is_staff: isAdmin,\n          role: isAdmin ? 'admin' : credentials.username.includes('agent') ? 'agent' : 'client'\n        }\n      };\n\n      // Guardar datos en localStorage\n      localStorage.setItem('authToken', mockResponse.token);\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\n      if (mockResponse.user.is_staff) {\n        localStorage.setItem('isAdminUser', 'true');\n      }\n      console.log('Login simulado exitoso:', mockResponse);\n      return mockResponse;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Register function - simplificada\n  // Añadir o modificar la función register para permitir la creación de usuarios administradores\n  register: async userData => {\n    try {\n      console.log('Registrando usuario:', userData);\n\n      // Verificar si es un registro de administrador (puedes usar un código secreto o campo especial)\n      const isAdmin = userData.secretCode === 'ADMIN123';\n\n      // Simulación de respuesta exitosa\n      const mockResponse = {\n        token: 'mock-token-register-12345',\n        user: {\n          id: Math.floor(Math.random() * 1000) + 2,\n          username: userData.username,\n          email: userData.email,\n          is_staff: isAdmin,\n          role: isAdmin ? 'admin' : userData.role === 'agent' ? 'agent' : 'client'\n        }\n      };\n\n      // Guardar datos en localStorage\n      localStorage.setItem('authToken', mockResponse.token);\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\n      if (mockResponse.user.is_staff) {\n        localStorage.setItem('isAdminUser', 'true');\n      }\n      console.log('Registro simulado exitoso:', mockResponse);\n      return mockResponse;\n    } catch (error) {\n      console.error('Error en registro:', error);\n      throw error;\n    }\n  },\n  // Obtener información del usuario actual\n  getCurrentUser: () => {\n    try {\n      const userData = localStorage.getItem('userData');\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  },\n  // Verificar si el usuario es administrador\n  isAdmin: () => {\n    return localStorage.getItem('isAdminUser') === 'true';\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","BASE_URL","API_URL","defaults","withCredentials","isAdminUser","localStorage","getItem","authService","isAuthenticated","logout","removeItem","login","credentials","console","log","isAdmin","username","mockResponse","token","user","id","email","is_staff","role","includes","setItem","JSON","stringify","error","register","userData","secretCode","Math","floor","random","getCurrentUser","parse"],"sources":["C:/Proyectos/BienesRaicesProyects/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Simplificamos usando una sola URL base\r\nconst BASE_URL = 'http://localhost:8000/';\r\n// eslint-disable-next-line no-unused-vars\r\nconst API_URL = `${BASE_URL}api/`;\r\n\r\n// Configuración básica de axios\r\naxios.defaults.withCredentials = false; // Cambiamos a false para evitar problemas de CORS\r\n\r\n// Exportamos esta función para que pueda ser importada directamente\r\n// Modificamos la función isAdminUser para que sea asíncrona\r\nexport const isAdminUser = async () => {\r\n  // Simplemente devolvemos el valor almacenado en localStorage\r\n  return localStorage.getItem('isAdminUser') === 'true';\r\n};\r\n\r\nconst authService = {\r\n  // Verificar si el usuario está autenticado\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('authToken');\r\n  },\r\n  \r\n  // Cerrar sesión\r\n  logout: () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('isAdminUser');\r\n    localStorage.removeItem('userData');\r\n  },\r\n  \r\n  // Login function - simplificada\r\n  // En la función login, modificar la parte de la respuesta simulada:\r\n  login: async (credentials) => {\r\n    try {\r\n      console.log('Intentando iniciar sesión con:', credentials);\r\n      \r\n      // Implementación temporal: simular inicio de sesión exitoso\r\n      // Solo permitir acceso de administrador a usuarios específicos\r\n      const isAdmin = credentials.username === 'admin' || credentials.username === 'superadmin';\r\n      \r\n      const mockResponse = {\r\n        token: 'mock-token-12345',\r\n        user: {\r\n          id: 1,\r\n          username: credentials.username,\r\n          email: `${credentials.username}@example.com`,\r\n          is_staff: isAdmin,\r\n          role: isAdmin ? 'admin' : \r\n                credentials.username.includes('agent') ? 'agent' : 'client'\r\n        }\r\n      };\r\n      \r\n      // Guardar datos en localStorage\r\n      localStorage.setItem('authToken', mockResponse.token);\r\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\r\n      \r\n      if (mockResponse.user.is_staff) {\r\n        localStorage.setItem('isAdminUser', 'true');\r\n      }\r\n      \r\n      console.log('Login simulado exitoso:', mockResponse);\r\n      return mockResponse;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Register function - simplificada\r\n  // Añadir o modificar la función register para permitir la creación de usuarios administradores\r\n  register: async (userData) => {\r\n    try {\r\n      console.log('Registrando usuario:', userData);\r\n      \r\n      // Verificar si es un registro de administrador (puedes usar un código secreto o campo especial)\r\n      const isAdmin = userData.secretCode === 'ADMIN123';\r\n      \r\n      // Simulación de respuesta exitosa\r\n      const mockResponse = {\r\n        token: 'mock-token-register-12345',\r\n        user: {\r\n          id: Math.floor(Math.random() * 1000) + 2,\r\n          username: userData.username,\r\n          email: userData.email,\r\n          is_staff: isAdmin,\r\n          role: isAdmin ? 'admin' : \r\n                userData.role === 'agent' ? 'agent' : 'client'\r\n        }\r\n      };\r\n      \r\n      // Guardar datos en localStorage\r\n      localStorage.setItem('authToken', mockResponse.token);\r\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\r\n      \r\n      if (mockResponse.user.is_staff) {\r\n        localStorage.setItem('isAdminUser', 'true');\r\n      }\r\n      \r\n      console.log('Registro simulado exitoso:', mockResponse);\r\n      return mockResponse;\r\n    } catch (error) {\r\n      console.error('Error en registro:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Obtener información del usuario actual\r\n  getCurrentUser: () => {\r\n    try {\r\n      const userData = localStorage.getItem('userData');\r\n      return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n      console.error('Error getting current user:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // Verificar si el usuario es administrador\r\n  isAdmin: () => {\r\n    return localStorage.getItem('isAdminUser') === 'true';\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}