{"ast":null,"code":"import axios from 'axios';\n\n// Simplificamos usando una sola URL base\nconst BASE_URL = 'http://localhost:8000/';\n// eslint-disable-next-line no-unused-vars\nconst API_URL = `${BASE_URL}api/`;\n\n// Configuración básica de axios\naxios.defaults.withCredentials = false; // Cambiamos a false para evitar problemas de CORS\n\n// Exportamos esta función para que pueda ser importada directamente\n// Modificamos la función isAdminUser para que sea asíncrona\nexport const isAdminUser = async () => {\n  // Simplemente devolvemos el valor almacenado en localStorage\n  return localStorage.getItem('isAdminUser') === 'true';\n};\nconst authService = {\n  // Verificar si el usuario está autenticado\n  isAuthenticated: () => {\n    return !!localStorage.getItem('authToken');\n  },\n  // Cerrar sesión\n  logout: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('isAdminUser');\n    localStorage.removeItem('userData');\n  },\n  // Login function - simplificada\n  login: async credentials => {\n    try {\n      console.log('Intentando iniciar sesión con:', credentials);\n\n      // Implementación temporal: simular inicio de sesión exitoso\n      // Esto te permitirá probar la interfaz mientras arreglas el backend\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          id: 1,\n          username: credentials.username,\n          email: `${credentials.username}@example.com`,\n          is_staff: credentials.username === 'admin'\n        }\n      };\n\n      // Guardar datos en localStorage\n      localStorage.setItem('authToken', mockResponse.token);\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\n\n      // Make sure this part is setting the admin flag correctly\n      if (mockResponse.user.is_staff) {\n        localStorage.setItem('isAdminUser', 'true');\n      }\n      console.log('Login simulado exitoso:', mockResponse);\n      return mockResponse;\n\n      /* Código para cuando el backend esté listo:\r\n      const response = await axios.post(`${API_URL}auth/login/`, credentials);\r\n      console.log('Respuesta del servidor:', response.data);\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('authToken', response.data.token);\r\n        localStorage.setItem('userData', JSON.stringify(response.data.user));\r\n        \r\n        if (response.data.user && response.data.user.is_staff) {\r\n          localStorage.setItem('isAdminUser', 'true');\r\n        }\r\n      }\r\n      return response.data;\r\n      */\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Register function - simplificada\n  register: async userData => {\n    try {\n      console.log('Enviando datos de registro al servidor:', userData);\n\n      // Implementación temporal: simular registro exitoso\n      const mockResponse = {\n        success: true,\n        message: 'Usuario registrado exitosamente',\n        user: {\n          id: 2,\n          username: userData.username,\n          email: userData.email\n        }\n      };\n      console.log('Registro simulado exitoso:', mockResponse);\n      return mockResponse;\n\n      /* Código para cuando el backend esté listo:\r\n      const response = await axios.post(`${API_URL}auth/register/`, userData);\r\n      console.log('Respuesta del servidor para registro:', response.data);\r\n      return response.data;\r\n      */\n    } catch (error) {\n      var _error$response;\n      console.error('Registration error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      throw error;\n    }\n  },\n  // Obtener información del usuario actual\n  getCurrentUser: () => {\n    try {\n      const userData = localStorage.getItem('userData');\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  },\n  // Verificar si el usuario es administrador\n  isAdmin: () => {\n    return localStorage.getItem('isAdminUser') === 'true';\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","BASE_URL","API_URL","defaults","withCredentials","isAdminUser","localStorage","getItem","authService","isAuthenticated","logout","removeItem","login","credentials","console","log","mockResponse","token","user","id","username","email","is_staff","setItem","JSON","stringify","error","register","userData","success","message","_error$response","response","data","getCurrentUser","parse","isAdmin"],"sources":["C:/Proyectos/BienesRaicesProyects/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Simplificamos usando una sola URL base\r\nconst BASE_URL = 'http://localhost:8000/';\r\n// eslint-disable-next-line no-unused-vars\r\nconst API_URL = `${BASE_URL}api/`;\r\n\r\n// Configuración básica de axios\r\naxios.defaults.withCredentials = false; // Cambiamos a false para evitar problemas de CORS\r\n\r\n// Exportamos esta función para que pueda ser importada directamente\r\n// Modificamos la función isAdminUser para que sea asíncrona\r\nexport const isAdminUser = async () => {\r\n  // Simplemente devolvemos el valor almacenado en localStorage\r\n  return localStorage.getItem('isAdminUser') === 'true';\r\n};\r\n\r\nconst authService = {\r\n  // Verificar si el usuario está autenticado\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('authToken');\r\n  },\r\n  \r\n  // Cerrar sesión\r\n  logout: () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('isAdminUser');\r\n    localStorage.removeItem('userData');\r\n  },\r\n  \r\n  // Login function - simplificada\r\n  login: async (credentials) => {\r\n    try {\r\n      console.log('Intentando iniciar sesión con:', credentials);\r\n      \r\n      // Implementación temporal: simular inicio de sesión exitoso\r\n      // Esto te permitirá probar la interfaz mientras arreglas el backend\r\n      const mockResponse = {\r\n        token: 'mock-token-12345',\r\n        user: {\r\n          id: 1,\r\n          username: credentials.username,\r\n          email: `${credentials.username}@example.com`,\r\n          is_staff: credentials.username === 'admin'\r\n        }\r\n      };\r\n      \r\n      // Guardar datos en localStorage\r\n      localStorage.setItem('authToken', mockResponse.token);\r\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\r\n      \r\n      // Make sure this part is setting the admin flag correctly\r\n      if (mockResponse.user.is_staff) {\r\n        localStorage.setItem('isAdminUser', 'true');\r\n      }\r\n      \r\n      console.log('Login simulado exitoso:', mockResponse);\r\n      return mockResponse;\r\n      \r\n      /* Código para cuando el backend esté listo:\r\n      const response = await axios.post(`${API_URL}auth/login/`, credentials);\r\n      console.log('Respuesta del servidor:', response.data);\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('authToken', response.data.token);\r\n        localStorage.setItem('userData', JSON.stringify(response.data.user));\r\n        \r\n        if (response.data.user && response.data.user.is_staff) {\r\n          localStorage.setItem('isAdminUser', 'true');\r\n        }\r\n      }\r\n      return response.data;\r\n      */\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Register function - simplificada\r\n  register: async (userData) => {\r\n    try {\r\n      console.log('Enviando datos de registro al servidor:', userData);\r\n      \r\n      // Implementación temporal: simular registro exitoso\r\n      const mockResponse = {\r\n        success: true,\r\n        message: 'Usuario registrado exitosamente',\r\n        user: {\r\n          id: 2,\r\n          username: userData.username,\r\n          email: userData.email\r\n        }\r\n      };\r\n      \r\n      console.log('Registro simulado exitoso:', mockResponse);\r\n      return mockResponse;\r\n      \r\n      /* Código para cuando el backend esté listo:\r\n      const response = await axios.post(`${API_URL}auth/register/`, userData);\r\n      console.log('Respuesta del servidor para registro:', response.data);\r\n      return response.data;\r\n      */\r\n    } catch (error) {\r\n      console.error('Registration error details:', error.response?.data);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Obtener información del usuario actual\r\n  getCurrentUser: () => {\r\n    try {\r\n      const userData = localStorage.getItem('userData');\r\n      return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n      console.error('Error getting current user:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // Verificar si el usuario es administrador\r\n  isAdmin: () => {\r\n    return localStorage.getItem('isAdminUser') === 'true';\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}