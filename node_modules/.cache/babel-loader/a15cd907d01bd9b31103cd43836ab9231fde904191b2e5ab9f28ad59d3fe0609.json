{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api/auth/';\n\n// Check if the current user is an admin\nexport const isAdminUser = async () => {\n  try {\n    // First check for a special admin flag in localStorage\n    const adminFlag = localStorage.getItem('isAdminUser');\n    if (adminFlag === 'true') {\n      return true;\n    }\n\n    // Then check with the server if we have a token\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      const response = await axios.get(`${API_URL}check-admin/`, {\n        headers: {\n          'Authorization': `Token ${token}`\n        }\n      });\n      if (response.status === 200) {\n        // Store the admin status for future checks\n        localStorage.setItem('isAdminUser', response.data.isAdmin.toString());\n        return response.data.isAdmin;\n      }\n    }\n    return false;\n  } catch (error) {\n    console.error('Error checking admin status:', error);\n    return false;\n  }\n};\nconst authService = {\n  // Obtener información del usuario actual\n  getCurrentUser: async () => {\n    try {\n      const token = localStorage.getItem('authToken');\n      if (!token) {\n        return null;\n      }\n      const config = {\n        headers: {\n          'Authorization': `Token ${token}`\n        }\n      };\n      const response = await axios.get(`${API_URL}user/`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching current user:', error);\n      return null;\n    }\n  },\n  // Verificar si el usuario está autenticado\n  isAuthenticated: () => {\n    return !!localStorage.getItem('authToken');\n  },\n  // Cerrar sesión\n  logout: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('isAdminUser');\n    // Puedes agregar redirección aquí si es necesario\n  },\n  // Login function\n  login: async credentials => {\n    try {\n      const response = await axios.post(`${API_URL}login/`, credentials);\n      if (response.data.token) {\n        localStorage.setItem('authToken', response.data.token);\n\n        // Check if user is admin and store that info\n        if (response.data.user && response.data.user.is_staff) {\n          localStorage.setItem('isAdminUser', 'true');\n        }\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Register function\n  register: async userData => {\n    try {\n      const response = await axios.post(`${API_URL}register/`, userData);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","isAdminUser","adminFlag","localStorage","getItem","token","response","get","headers","status","setItem","data","isAdmin","toString","error","console","authService","getCurrentUser","config","isAuthenticated","logout","removeItem","login","credentials","post","user","is_staff","register","userData"],"sources":["C:/Proyectos/BienesRaicesProyects/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000/api/auth/';\r\n\r\n// Check if the current user is an admin\r\nexport const isAdminUser = async () => {\r\n  try {\r\n    // First check for a special admin flag in localStorage\r\n    const adminFlag = localStorage.getItem('isAdminUser');\r\n    if (adminFlag === 'true') {\r\n      return true;\r\n    }\r\n    \r\n    // Then check with the server if we have a token\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      const response = await axios.get(`${API_URL}check-admin/`, {\r\n        headers: {\r\n          'Authorization': `Token ${token}`\r\n        }\r\n      });\r\n      \r\n      if (response.status === 200) {\r\n        // Store the admin status for future checks\r\n        localStorage.setItem('isAdminUser', response.data.isAdmin.toString());\r\n        return response.data.isAdmin;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  } catch (error) {\r\n    console.error('Error checking admin status:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst authService = {\r\n  // Obtener información del usuario actual\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (!token) {\r\n        return null;\r\n      }\r\n      \r\n      const config = {\r\n        headers: {\r\n          'Authorization': `Token ${token}`\r\n        }\r\n      };\r\n      \r\n      const response = await axios.get(`${API_URL}user/`, config);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching current user:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // Verificar si el usuario está autenticado\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('authToken');\r\n  },\r\n  \r\n  // Cerrar sesión\r\n  logout: () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('isAdminUser');\r\n    // Puedes agregar redirección aquí si es necesario\r\n  },\r\n  \r\n  // Login function\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}login/`, credentials);\r\n      if (response.data.token) {\r\n        localStorage.setItem('authToken', response.data.token);\r\n        \r\n        // Check if user is admin and store that info\r\n        if (response.data.user && response.data.user.is_staff) {\r\n          localStorage.setItem('isAdminUser', 'true');\r\n        }\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Register function\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}register/`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}