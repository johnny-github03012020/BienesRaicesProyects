{"ast":null,"code":"import axios from'axios';// Simplificamos usando una sola URL base\nconst BASE_URL='http://localhost:8000/';// eslint-disable-next-line no-unused-vars\nconst API_URL=`${BASE_URL}api/`;// Configuración básica de axios\naxios.defaults.withCredentials=false;// Cambiamos a false para evitar problemas de CORS\n// Exportamos esta función para que pueda ser importada directamente\n// Modificamos la función isAdminUser para que sea asíncrona\nexport const isAdminUser=async()=>{// Simplemente devolvemos el valor almacenado en localStorage\nreturn localStorage.getItem('isAdminUser')==='true';};const authService={// Verificar si el usuario está autenticado\nisAuthenticated:()=>{return!!localStorage.getItem('authToken');},// Cerrar sesión\nlogout:()=>{localStorage.removeItem('authToken');localStorage.removeItem('isAdminUser');localStorage.removeItem('userData');},// Login function - simplificada\n// En la función login, modificar la parte de la respuesta simulada:\nlogin:async credentials=>{try{console.log('Intentando iniciar sesión con:',credentials);// Implementación temporal: simular inicio de sesión exitoso\n// Solo permitir acceso de administrador a usuarios específicos\nconst isAdmin=credentials.username==='admin'||credentials.username==='superadmin';const mockResponse={token:'mock-token-12345',user:{id:1,username:credentials.username,email:`${credentials.username}@example.com`,is_staff:isAdmin,role:isAdmin?'admin':credentials.username.includes('agent')?'agent':'client'}};// Guardar datos en localStorage\nlocalStorage.setItem('authToken',mockResponse.token);localStorage.setItem('userData',JSON.stringify(mockResponse.user));if(mockResponse.user.is_staff){localStorage.setItem('isAdminUser','true');}console.log('Login simulado exitoso:',mockResponse);return mockResponse;}catch(error){console.error('Login error:',error);throw error;}},// Register function - simplificada\n// Añadir o modificar la función register para permitir la creación de usuarios administradores\nregister:async userData=>{try{console.log('Registrando usuario:',userData);// Verificar si es un registro de administrador (puedes usar un código secreto o campo especial)\nconst isAdmin=userData.secretCode==='ADMIN123';// Simulación de respuesta exitosa\nconst mockResponse={token:'mock-token-register-12345',user:{id:Math.floor(Math.random()*1000)+2,username:userData.username,email:userData.email,is_staff:isAdmin,role:isAdmin?'admin':userData.role==='agent'?'agent':'client'}};// Guardar datos en localStorage\nlocalStorage.setItem('authToken',mockResponse.token);localStorage.setItem('userData',JSON.stringify(mockResponse.user));if(mockResponse.user.is_staff){localStorage.setItem('isAdminUser','true');}console.log('Registro simulado exitoso:',mockResponse);return mockResponse;}catch(error){console.error('Error en registro:',error);throw error;}},// Obtener información del usuario actual\ngetCurrentUser:()=>{try{const userData=localStorage.getItem('userData');return userData?JSON.parse(userData):null;}catch(error){console.error('Error getting current user:',error);return null;}},// Verificar si el usuario es administrador\nisAdmin:()=>{return localStorage.getItem('isAdminUser')==='true';}};export default authService;","map":{"version":3,"names":["axios","BASE_URL","API_URL","defaults","withCredentials","isAdminUser","localStorage","getItem","authService","isAuthenticated","logout","removeItem","login","credentials","console","log","isAdmin","username","mockResponse","token","user","id","email","is_staff","role","includes","setItem","JSON","stringify","error","register","userData","secretCode","Math","floor","random","getCurrentUser","parse"],"sources":["C:/Proyectos/BienesRaicesProyects/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Simplificamos usando una sola URL base\r\nconst BASE_URL = 'http://localhost:8000/';\r\n// eslint-disable-next-line no-unused-vars\r\nconst API_URL = `${BASE_URL}api/`;\r\n\r\n// Configuración básica de axios\r\naxios.defaults.withCredentials = false; // Cambiamos a false para evitar problemas de CORS\r\n\r\n// Exportamos esta función para que pueda ser importada directamente\r\n// Modificamos la función isAdminUser para que sea asíncrona\r\nexport const isAdminUser = async () => {\r\n  // Simplemente devolvemos el valor almacenado en localStorage\r\n  return localStorage.getItem('isAdminUser') === 'true';\r\n};\r\n\r\nconst authService = {\r\n  // Verificar si el usuario está autenticado\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('authToken');\r\n  },\r\n  \r\n  // Cerrar sesión\r\n  logout: () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('isAdminUser');\r\n    localStorage.removeItem('userData');\r\n  },\r\n  \r\n  // Login function - simplificada\r\n  // En la función login, modificar la parte de la respuesta simulada:\r\n  login: async (credentials) => {\r\n    try {\r\n      console.log('Intentando iniciar sesión con:', credentials);\r\n      \r\n      // Implementación temporal: simular inicio de sesión exitoso\r\n      // Solo permitir acceso de administrador a usuarios específicos\r\n      const isAdmin = credentials.username === 'admin' || credentials.username === 'superadmin';\r\n      \r\n      const mockResponse = {\r\n        token: 'mock-token-12345',\r\n        user: {\r\n          id: 1,\r\n          username: credentials.username,\r\n          email: `${credentials.username}@example.com`,\r\n          is_staff: isAdmin,\r\n          role: isAdmin ? 'admin' : \r\n                credentials.username.includes('agent') ? 'agent' : 'client'\r\n        }\r\n      };\r\n      \r\n      // Guardar datos en localStorage\r\n      localStorage.setItem('authToken', mockResponse.token);\r\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\r\n      \r\n      if (mockResponse.user.is_staff) {\r\n        localStorage.setItem('isAdminUser', 'true');\r\n      }\r\n      \r\n      console.log('Login simulado exitoso:', mockResponse);\r\n      return mockResponse;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Register function - simplificada\r\n  // Añadir o modificar la función register para permitir la creación de usuarios administradores\r\n  register: async (userData) => {\r\n    try {\r\n      console.log('Registrando usuario:', userData);\r\n      \r\n      // Verificar si es un registro de administrador (puedes usar un código secreto o campo especial)\r\n      const isAdmin = userData.secretCode === 'ADMIN123';\r\n      \r\n      // Simulación de respuesta exitosa\r\n      const mockResponse = {\r\n        token: 'mock-token-register-12345',\r\n        user: {\r\n          id: Math.floor(Math.random() * 1000) + 2,\r\n          username: userData.username,\r\n          email: userData.email,\r\n          is_staff: isAdmin,\r\n          role: isAdmin ? 'admin' : \r\n                userData.role === 'agent' ? 'agent' : 'client'\r\n        }\r\n      };\r\n      \r\n      // Guardar datos en localStorage\r\n      localStorage.setItem('authToken', mockResponse.token);\r\n      localStorage.setItem('userData', JSON.stringify(mockResponse.user));\r\n      \r\n      if (mockResponse.user.is_staff) {\r\n        localStorage.setItem('isAdminUser', 'true');\r\n      }\r\n      \r\n      console.log('Registro simulado exitoso:', mockResponse);\r\n      return mockResponse;\r\n    } catch (error) {\r\n      console.error('Error en registro:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Obtener información del usuario actual\r\n  getCurrentUser: () => {\r\n    try {\r\n      const userData = localStorage.getItem('userData');\r\n      return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n      console.error('Error getting current user:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // Verificar si el usuario es administrador\r\n  isAdmin: () => {\r\n    return localStorage.getItem('isAdminUser') === 'true';\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}