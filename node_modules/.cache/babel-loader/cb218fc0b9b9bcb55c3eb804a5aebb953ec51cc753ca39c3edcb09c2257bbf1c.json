{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api/auth/';\nconst authService = {\n  login: async credentials => {\n    try {\n      const response = await axios.post(`${API_URL}login/`, credentials);\n      if (response.data.token) {\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  // Add this method to check if the token is valid\n  isTokenValid: () => {\n    const token = localStorage.getItem('authToken');\n    if (!token) return false;\n\n    // For a real app, you would verify the token's expiration\n    // For this demo, we'll just check if it exists and has a reasonable length\n    return token.length > 10;\n  },\n  // Update the isAuthenticated method to use the token validation\n  isAuthenticated: () => {\n    return authService.isTokenValid();\n  },\n  // Add a method to refresh the token if needed\n  refreshToken: async () => {\n    // In a real app, this would call an API endpoint to refresh the token\n    // For this demo, we'll just extend the token's \"lifetime\"\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      // Create a \"refreshed\" token by adding a timestamp\n      const refreshedToken = token + '_refreshed_' + Date.now();\n      localStorage.setItem('authToken', refreshedToken);\n      return true;\n    }\n    return false;\n  },\n  // Added comma here\n\n  // For demo purposes - creates a fake token\n  demoLogin: (email, password) => {\n    // This is just for development/testing\n    if (email === 'admin@bienesraices.com' && password === 'admin123') {\n      const fakeToken = 'demo-token-' + Math.random().toString(36).substring(2);\n      localStorage.setItem('authToken', fakeToken);\n      localStorage.setItem('user', JSON.stringify({\n        name: 'Administrador',\n        email: email,\n        role: 'admin'\n      }));\n      return true;\n    }\n    return false;\n  }\n};\nexport default authService;\n\n// Check if the current user is an admin\nexport const isAdminUser = async () => {\n  try {\n    // First check for a special admin flag in localStorage\n    const adminFlag = localStorage.getItem('isAdminUser');\n    if (adminFlag === 'true') {\n      return true;\n    }\n\n    // Then check with the server if we have a token\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      const response = await fetch(`${API_URL}/auth/check-admin`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // Store the admin status for future checks\n        localStorage.setItem('isAdminUser', data.isAdmin.toString());\n        return data.isAdmin;\n      }\n    }\n    return false;\n  } catch (error) {\n    console.error('Error checking admin status:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["axios","API_URL","authService","login","credentials","response","post","data","token","localStorage","setItem","JSON","stringify","user","error","console","logout","removeItem","getCurrentUser","getItem","parse","isTokenValid","length","isAuthenticated","refreshToken","refreshedToken","Date","now","demoLogin","email","password","fakeToken","Math","random","toString","substring","name","role","isAdminUser","adminFlag","fetch","method","headers","ok","json","isAdmin"],"sources":["C:/Proyectos/BienesRaicesProyects/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000/api/auth/';\r\n\r\nconst authService = {\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}login/`, credentials);\r\n      if (response.data.token) {\r\n        localStorage.setItem('authToken', response.data.token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Add this method to check if the token is valid\r\n  isTokenValid: () => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (!token) return false;\r\n    \r\n    // For a real app, you would verify the token's expiration\r\n    // For this demo, we'll just check if it exists and has a reasonable length\r\n    return token.length > 10;\r\n  },\r\n  \r\n  // Update the isAuthenticated method to use the token validation\r\n  isAuthenticated: () => {\r\n    return authService.isTokenValid();\r\n  },\r\n  \r\n  // Add a method to refresh the token if needed\r\n  refreshToken: async () => {\r\n    // In a real app, this would call an API endpoint to refresh the token\r\n    // For this demo, we'll just extend the token's \"lifetime\"\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      // Create a \"refreshed\" token by adding a timestamp\r\n      const refreshedToken = token + '_refreshed_' + Date.now();\r\n      localStorage.setItem('authToken', refreshedToken);\r\n      return true;\r\n    }\r\n    return false;\r\n  },  // Added comma here\r\n  \r\n  // For demo purposes - creates a fake token\r\n  demoLogin: (email, password) => {\r\n    // This is just for development/testing\r\n    if (email === 'admin@bienesraices.com' && password === 'admin123') {\r\n      const fakeToken = 'demo-token-' + Math.random().toString(36).substring(2);\r\n      localStorage.setItem('authToken', fakeToken);\r\n      localStorage.setItem('user', JSON.stringify({\r\n        name: 'Administrador',\r\n        email: email,\r\n        role: 'admin'\r\n      }));\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default authService;\r\n\r\n\r\n// Check if the current user is an admin\r\nexport const isAdminUser = async () => {\r\n  try {\r\n    // First check for a special admin flag in localStorage\r\n    const adminFlag = localStorage.getItem('isAdminUser');\r\n    if (adminFlag === 'true') {\r\n      return true;\r\n    }\r\n    \r\n    // Then check with the server if we have a token\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      const response = await fetch(`${API_URL}/auth/check-admin`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // Store the admin status for future checks\r\n        localStorage.setItem('isAdminUser', data.isAdmin.toString());\r\n        return data.isAdmin;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  } catch (error) {\r\n    console.error('Error checking admin status:', error);\r\n    return false;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}